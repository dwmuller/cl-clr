Reimplement DEFINE-CLR-CALL. First version might be stupid.

CL-CLR no longer accepts symbols in arbitrary argument locations in
lieu of type object. Mechanisms have been exported to work around
this. But I'm not real happy with the result. Consider whether it
should be returned to its previous state, or whether the reader syntax
should be modified instead.

Update make-zip.cmd.

Test argument binding of floats and doubles, particularly when running
with LispWorks.

Make LIST-TO-CLR-ARRAY more efficient by using the substrate's
make_array() function.

See packages.lisp for other as-yet-unimplemented functions.

Test by-ref types. I don't think they're going to automagically work,
but they might. If not, we need a wrapper class in the substrate,
changes to argument matching and binding to account for it, and work
in the Lisp layer to use it.

Implement TREAT-AS. Requires work in invocation and substrate.

Test performance. Add tools to the substrate to help with this.

Think about/finish BOX-LISP-VALUE. It's simple and elegant, but only
half done. The other half is harder. :) Let the user specify a
conversion from a CLR type. Subclassing CLR-OBJECT is a possibility.
Need to find a unique type ID in CLR, or we'll be doing string-keyed
hashing.

Look for opportunities to clean up the LispBinder, provided it
continues to work out OK as the focal point of the substrate.

In the same vein, consider returning a customized MethodInfo wrapper
might be an avenue to faster calls -- look for opportunities to cache
work results.

Implement vendor-specific logic for freeing handles. (Done for
Lispworks.)

Test performance, compare to RDNZL.

Test image creation and loading.

Figure out what's up with GetType in AppDomain. Why do I get TWO
MemberInfo objects for this? (Note: Worked around by preferring
the on DeclaredType that can be converted to the other. Not
a guaranteed solution.)

Add support for ASDF-INSTALL. I guess that requires that I get it
working on my WinXP box first. :-)

Allow the addition of a namespace prefix on assembly contents when
loading (or binding?) an assembly. This allows working with
conflicting type names, and it's how C# deals with the problem (via a
compiler switch).

Track assemblies loaded via CL-CLR. This is a likely prereq for the
previous item. It would also allow users to load assemblies without
CL-CLR to omit them from type name searches.

Allow specifying how CLR names are translated to symbol names:
:upcase, :downcase, :preserve, :invert, and :lisp to attempt
conversion to Lisp-like naming conventions. Default to :preserve,
because it's the least likely to collide with Lisp names. Might want
to use alternate package name prefixes for the different strategies.

Consider a more specific member symbol approach. Member symbols
actually exist within class namespaces. Overriding does not create a
new symbol. Symbols are automatically "imported" from base classes to
derived classes. Consider analyzing all this when an assembly is
loaded, and/or when a type is imported. Would result in a lot of
symbols, but also more specific information per-symbol. Users who use
specific member symbols (rather than generalized ones resolved at call
time) would often get a performance boost. Note that this would get
rid of a (small) problem that prevents user-defined conversions from
specific symbols to CLR values; currently a symbol as first arg
triggers static calls. With this scheme, static calls would have to
use the specific member symbol as the operator.

Define generalized member symbols as macros rather than
functions. Expansion could include a unique symbol defined such that
it could represent a unique calling site that self-optimizes the
member lookup at runtime. When a *function* is needed, use a
*specific* member symbol. (See previous item.) Generalized member
symbol expansions might afford an opportunity to cache results
of member info at a call site.

Speed up the reader's type lookup by caching results.

Add support for CLR arrays of ranks greater than one.

Enhance SLIME's symbol completion logic. This would make the
non-reader approach more viable, typing names in directly with escape
(e.g. (|.GetType '|Application|), assuming the CLR!System package is
being used) Possible algorithm:
  - Make elisp code find symbol begin across escapes.
  - Close any open multi-escape before sending to SLIME.
  - Read as an uninterned symbol to find out what the reader makes of it.
  - Use the resulting symbol's name directly to find candidates.

